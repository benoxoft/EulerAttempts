using System;
using System.Collections;
using System.Collections.Generic;

namespace euler
{
	public class EulerFuncs
	{
		public EulerFuncs ()
		{
		}

		//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
		//Find the sum of all the multiples of 3 or 5 below 1000.
		public int FindSum(int below) {
			int sum = 0;
			for (int i = 1; i < below; i++) {
				if (i % 3 == 0 || i % 5 == 0) {
					sum += i;
				}
			}
			return sum;
		}

		//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
		//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
		public List<int> FibonacciTerms(int num) {
			List<int> l = new List<int> ();
			l.Add (1);
			if (num == 1) {
				return l;
			}
			l.Add (2);
			if (num == 2) {
				return l;
			}
			int previousPrevious = 1;
			int previous = 2;
			int newNum = 0;
			for (int i = 2; i < num; i++) {
				newNum = previous + previousPrevious;
				previousPrevious = previous;
				previous = newNum;
				l.Add (newNum);
			}
			return l;
		}

		public int Fibonacci(int num) {
			var terms = FibonacciTerms (num);
			return terms[terms.Count-1];
		}

		public uint FindAnswer2() {
			var terms = FibonacciTerms (600);
			uint sum = 0;
			foreach(uint val in terms) {
				if (val % 2 == 0 && val < 4000000) {
					sum += val;
				}
			}
			return sum; 
		}

		public List<long> FindPrimeNumbers(long max) {
			var primeNumbers = new List<long> ();
			primeNumbers.Add (1);
			primeNumbers.Add (2);
			for (long i = 3; i < max; i+=2) {
				if (i % 1001 == 0) {
					Console.WriteLine (i);
				}
				var skip = false;
				var topfactor = Math.Sqrt (i);
				foreach (var prime in primeNumbers) {
					if (prime > topfactor) {
						break;
					}
					if (prime != 1 && i % prime == 0) {
						skip = true;
						break;
					}
				}
				if(skip) {
					continue;
				}
				long factorCount = 0;
				for (long j = 1; j <= i; j++) {
					if (i % j == 0) {
						factorCount++;
					}
					if (factorCount > 2) {
						continue;
					}
				}
				if (factorCount <= 2) {
					primeNumbers.Add (i);
				}
			}
			return primeNumbers;
		}

		public long FindAnswer3(long number) {
			var numbers = FindPrimeNumbers ((long) Math.Sqrt(number));
			numbers.Reverse ();
			Console.WriteLine ("Looking for answers");
			var values = Search3 (number, numbers, new List<long> ());
			long biggest = 0;
			foreach (var val in values) {
				if (val > biggest) {
					biggest = val;
				}
			}
			return biggest;
		}

		public long Search31(long total, List<long> primes, List<long> multipliers) {
			foreach (var prime in primes) {
				if (total % prime == 0) {
					return prime;
				}
			}
			throw new ApplicationException ("Could not find a value");
		}
		private List<long> Search3(long total, List<long> primes, List<long> multipliers) {
			foreach(var prime in primes) {
				if (prime == 1) {
					continue;
				}

				if (MultiplyList (multipliers, prime) == total) {
					multipliers.Add (prime);
					return multipliers;
				} else if (MultiplyList (multipliers, prime) < total) {
					multipliers.Add (prime);
					var retval = Search3 (total, primes, multipliers);
					if (retval != null) {
						return retval;
					} else {
						multipliers.Remove (prime);
					}
				} 

			}
			return null;
		}

		private long MultiplyList(List<long> multipliers, long newterm) {
			long total = 1;
			foreach (var term in multipliers) {
				total *= term;
			}
			return total * newterm;
		}
	}
}

